using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Threading;
using Saasi.Shared.Workload;

namespace BusinessSimulation.Controllers
{
    [Route("api")]
    public class ValuesController : Controller
    {
        // GET api/Business
        [HttpGet("Business")]
        /*
         * io: whether to generate Disk I/O load. (yes if io=1, no if io=0)
         * cpu: whether to generate CPU usage. (yes if cpu=1, no if cpu=0)
         * memory: whether to generate Memory usage. (yes if memory=1, no if memory=0)
         * timestart: the Unix timestamp when the request is sent (generated by the user)
         * timetorun: for how long (in seconds) should we generate the CPU/Memory/IO load?
         * timeout: the maximum time (in seconds) allowed for the request to finish.
         */
        public String GenerateBusinessSimulation(int io,int cpu,int memory, long timestart,int timetorun,int timeout)
        {
            long StartTimestampMs = timestart * 1000;
            long ExpectedFinishTimeMs = (timestart + timeout) * 1000;
            DateTime StartTimeDateTime = new DateTime(StartTimestampMs);//don't know if it's need to add the 1970
            long ReceivedTimeMs = new DateTime().Ticks;//don't know if it's reasonable
            if (1==io)
            {
                Saasi.Shared.Workload.GenerateIoWorkload ioWorkload= new GenerateIoWorkload();
                ioWorkload.Run(timetorun);
            }
            if (1 == cpu)
            {
                Saasi.Shared.Workload.GenerateCpuWorkload cpuWorkload = new GenerateCpuWorkload();
                cpuWorkload.Run(timetorun);
            }
            if (1 == memory)
            {
                Saasi.Shared.Workload.GenerateMemoryWorkload memoryWorkload = new GenerateMemoryWorkload();
                memoryWorkload.Run(timetorun);
            }
            return "finish generation";
        }

    }
}
